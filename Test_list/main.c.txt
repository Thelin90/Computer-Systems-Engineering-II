int volatile nodeCountTL=0;
int volatile nodeCountRL=0;
int volatile nodeCountWL=0;
int volatile send = 1;
int volatile dlVal = 0;
int flag =0, testDone=0;


int isEqualPointer(void * comp1, void * comp2) {
  
  if(comp1 == comp2) {
    return 1;
  }
  return 0;
}

int isNotEqualPointer(void * comp1, void * comp2) {
  
  if(comp1 != comp2) {
    return 1;
  }
  return 0;
}

int isEqualInt(int comp1, int comp2) {
  
  if(comp1 == comp2) {
    return 1;
  }
  return 0;
}

int isNotEqualInt(int comp1, int comp2) {
  
  if(comp1 != comp2) {
    return 1;
  }
  return 0;
}

void TimerInt(void){
}

void main(void) {
  
  /*
  Init test for the three lists
  */
  list *timerList, *waitList, *readyList;
  
  listobj *objTest = NULL;
  
  assert(isEqualPointer(timerList,NULL));
  assert(isEqualPointer(objTest, NULL));
  
  readyList = create_list();
  timerList = create_list();
  waitList = create_list();
  
  assert(isNotEqualPointer(timerList,NULL));
  assert(isNotEqualPointer(readyList,NULL));
  assert(isNotEqualPointer(waitList,NULL));
  
  assert(isEqualPointer(timerList->pHead->pPrevious,timerList->pHead));
  assert(isEqualPointer(readyList->pHead->pPrevious,readyList->pHead));
  assert(isEqualPointer(waitList->pHead->pPrevious,waitList->pHead));
  
  assert(isEqualPointer(timerList->pTail->pNext,timerList->pTail));
  assert(isEqualPointer(readyList->pTail->pNext,readyList->pTail));
  assert(isEqualPointer(waitList->pTail->pNext,waitList->pTail));
  
  /*
  Creating nodes to the end of the stack
  */
  
  if(flag==0) {
    
    while(1) {
      
      if(flag==1) {
        testDone=1;
        break;
      }
      
      listobj * node = create_listobj_nTCnt(send);
      insertSortBynTCnt(timerList, node);
      
      if(node!=NULL) {
        dlVal = node->pTask->DeadLine;
        assert(isNotEqualPointer(node, NULL));
        assert(isEqualInt(timerList->pTail->pPrevious->nTCnt, (send)));
        assert(isEqualInt(timerList->pTail->pPrevious->pTask->DeadLine, (dlVal)));
        nodeCountTL++;
        send=send+1;
      }
      
      else if(node==NULL){
        
        send=1;
        
        assert(isEqualPointer(node, NULL));
        
        while(1) {
          if(flag==1) {
            break;
          }
          node = extractionFirst(timerList);
          
          if(node!=NULL) {
            send = node->pTask->DeadLine;
            assert(isNotEqualPointer(node, NULL));
            insertSortByDeadLine(readyList, node);
            assert(isEqualInt(readyList->pTail->pPrevious->pTask->DeadLine, (send)));
            
            nodeCountRL++;
            nodeCountTL--;
          }
          
          else if(node==NULL) {
            assert(isEqualPointer(timerList->pHead->pPrevious,timerList->pHead));
            
            assert(isEqualPointer(node, NULL));
            
            node = extractionAnyObj(readyList->pHead->pNext->pNext->pNext);
            assert(isNotEqualPointer(node, NULL));
            insertSortByDeadLine(waitList, node);
            nodeCountRL--;
            
            node = extractionFirst(readyList);
            insertSortByDeadLine(waitList, node);
            nodeCountRL--;
            assert(isNotEqualPointer(node, NULL));
            
            assert(isNotEqualInt(waitList->pHead->pNext->nTCnt, waitList->pHead->pNext->pNext->nTCnt));
            assert(isNotEqualInt(waitList->pHead->pNext->pTask->DeadLine, waitList->pHead->pNext->pNext->pTask->DeadLine));
            
            while(1) {
              if(flag==1) {
                break;
              }
              
              node = extractionFirst(readyList);
              
              if(node!=NULL) {
                send = node->pTask->DeadLine;
                assert(isNotEqualPointer(node, NULL));
                insertSortByDeadLine(waitList, node);
                assert(isNotEqualInt(waitList->pHead->pNext->pTask->DeadLine, (send)));
                
                nodeCountWL++;
                nodeCountRL--;
              }
              if(node==NULL) {
                
                int checkN=1, checkD=100;
                
                assert(isEqualInt(timerList->pHead->nTCnt,0));
                assert(isEqualInt(timerList->pHead->pNext->nTCnt,0));
                
                assert(isEqualPointer(timerList->pHead->pTask,NULL));
                assert(isEqualPointer(timerList->pHead->pNext->pTask,NULL));
                
                assert(isEqualInt(readyList->pHead->nTCnt,0));
                assert(isEqualInt(readyList->pHead->pNext->nTCnt,0));
                
                assert(isEqualPointer(readyList->pHead->pTask,NULL));
                assert(isEqualPointer(readyList->pHead->pNext->pTask,NULL));
                
                node = waitList->pHead;
                while(1) {
                  node = node->pNext;
                  if(flag==0) {
                    assert(isEqualInt(node->nTCnt, checkN));
                    assert(isNotEqualInt(node->nTCnt, checkD));
                    checkN++;
                    
                    assert(isEqualInt(node->pTask->DeadLine, checkD));
                    assert(isNotEqualInt(node->nTCnt, checkN));
                    checkD=checkD+100;
                  }
                  
                  if(checkD>6300) {
                    flag=1;
                    checkD=100;
                    checkN=1;
                    break;
                  }
                }  
              }
            }
          }
        }
      }  
    }
  }
  if(flag==1) {
    while(1) {
      //endless loop, test is done
    }
  }